'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @author Pedro Sanders
 * @since v1
 */
var AccountManager = Packages.gov.nist.javax.sip.clientauthutils.AccountManager;
var UserCredentials = Packages.gov.nist.javax.sip.clientauthutils.UserCredentials;

// There is something mysterious about this class that
// makes gatewaysAPI null beyond the constructor.
// The only way it works is by using this a global :(
var gatewaysAPI;

/**
 * This serves as an authentication helper for Gateways
 */

var AccountManagerService = function () {
    function AccountManagerService(dataAPIs) {
        _classCallCheck(this, AccountManagerService);

        gatewaysAPI = dataAPIs.GatewaysAPI;
    }

    _createClass(AccountManagerService, [{
        key: 'getGateway',
        value: function getGateway(ct) {
            var gwRef = ct.getRequest().getHeader('X-Gateway-Ref').value;
            var response = gatewaysAPI.getGateway(gwRef);

            if (response.status == 200) {
                var gateway = response.result;

                return {
                    username: gateway.spec.credentials.username,
                    secret: gateway.spec.credentials.secret,
                    host: gateway.spec.host
                };
            }

            return {};
        }
    }, {
        key: 'getAccountManager',
        value: function getAccountManager() {
            var getGateway = this.getGateway;

            return new AccountManager({
                getCredentials: function getCredentials(challengedTransaction, realm) {
                    return new UserCredentials({
                        getUserName: function getUserName() {
                            return getGateway(challengedTransaction).username;
                        },
                        getPassword: function getPassword() {
                            return getGateway(challengedTransaction).secret;
                        },
                        getSipDomain: function getSipDomain() {
                            return getGateway(challengedTransaction).host;
                        }
                    });
                }
            });
        }
    }]);

    return AccountManagerService;
}();

exports.default = AccountManagerService;