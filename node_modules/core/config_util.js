'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function () {
    var config = getConfigFromFile();
    config.salt = getSalt();
    config.spec.securityContext = getDefaultSecContext(config.spec.securityContext);
    var spec = getSysPresets(config.spec);
    config.spec.externAddr = spec.externAddr;
    config.spec.localnets = spec.localnets;
    config.spec.dataSource = spec.dataSource;
    config.spec.registrarIntf = spec.registrarIntf;
    config.spec.restService = getRestfulPresets(config.spec.restService);
    config.system = getSystemConfig();

    if (config.spec.registrarIntf == undefined) {
        config.spec.registrarIntf = 'External';
    }

    if (config.spec.useToAsAOR == undefined) {
        config.spec.useToAsAOR = false;
    }

    if (config.spec.bindAddr == undefined) {
        config.spec.bindAddr = InetAddress.getLocalHost().getHostAddress();
    }

    if (config.spec.logging == undefined) {
        config.spec.logging = { traceLevel: 0 };
    }

    if (config.spec.dataSource == undefined) {
        config.spec.dataSource = { provider: 'files_data_provider' };
    }

    if (config.metadata == undefined) {
        config.metadata = {};
    }

    if (config.metadata.userAgent == undefined) {
        config.metadata.userAgent = 'Routr ' + config.system.version;
    }

    return config;
};

var _utils = require('data_api/utils');

var _utils2 = _interopRequireDefault(_utils);

var _files_util = require('utils/files_util');

var _files_util2 = _interopRequireDefault(_files_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @author Pedro Sanders
 * @since v1
 */
var InetAddress = Packages.java.net.InetAddress;
var File = Packages.java.io.File;
var System = Packages.java.lang.System;
var UUID = Packages.java.util.UUID;

function getRestfulPresets(rs) {
    var restService = rs == undefined ? {} : rs;

    if (restService.keyStore == undefined) {
        restService.keyStore = 'etc/certs/api-cert.jks';
        restService.keyStorePassword = 'changeit';
    }

    if (restService.unsecured == undefined) {
        restService.unsecured = false;
    }

    if (restService.trustStore == undefined) {
        restService.trustStore = null;
    }

    if (restService.trustStorePassword == undefined) {
        restService.trustStorePassword = null;
    }

    if (restService.bindAddr == undefined) {
        restService.bindAddr = '0.0.0.0';
    }

    if (restService.port == undefined) {
        restService.port = 4567;
    }

    return restService;
}

function getSysPresets(s) {
    var spec = s == undefined ? {} : s;

    if (System.getenv("ROUTR_EXTERN_ADDR") != null) {
        spec.externAddr = Packages.java.lang.System.getenv("ROUTR_EXTERN_ADDR");
    }

    if (System.getenv("ROUTR_LOCALNETS") != null) {
        spec.localnets = Packages.java.lang.System.getenv("ROUTR_LOCALNETS").split(",");
    }

    if (System.getenv("ROUTR_DS_PROVIDER") != null) {
        spec.dataSource = { provider: System.getenv("ROUTR_DS_PROVIDER") };
    }

    if (System.getenv("ROUTR_REGISTRAR_INTF") != null) {
        spec.registrarIntf = System.getenv("ROUTR_REGISTRAR_INTF");
    }

    return spec;
}

function getDefaultSecContext(sc) {
    var securityContext = void 0;
    sc == undefined ? securityContext = {} : securityContext = sc;

    if (securityContext.client == undefined) {
        securityContext.client = {};
    }

    if (securityContext.client.authType == undefined) {
        securityContext.client.authType = 'Disabled';
    }

    if (securityContext.client.protocols == undefined) {
        securityContext.client.protocols = ['SSLv3', 'TLSv1.2', 'TLSv1.1', 'TLSv1'];
    }

    if (securityContext.debugging == undefined) {
        securityContext.debugging = false;
    }

    if (securityContext.keyStore == undefined) {
        securityContext.keyStore = 'etc/certs/domains-cert.jks';
    }

    if (securityContext.trustStore == undefined) {
        securityContext.trustStore = 'etc/certs/domains-cert.jks';
    }

    if (securityContext.keyStorePassword == undefined) {
        securityContext.keyStorePassword = 'changeit';
    }

    if (securityContext.trustStorePassword == undefined) {
        securityContext.trustStorePassword = 'changeit';
    }

    if (securityContext.keyStoreType == undefined) {
        securityContext.keyStoreType = 'jks';
    }

    return securityContext;
}

function getSystemConfig() {
    var system = {};
    system.version = 'v1.0';
    system.apiVersion = 'v1beta1';
    system.apiPath = '/api' + '/' + system.apiVersion;
    system.env = [];
    system.env.push({ "var": 'ROUTR_JAVA_OPTS', "value": System.getenv("ROUTR_JAVA_OPTS") });
    system.env.push({ "var": 'ROUTR_DS_PROVIDER', "value": System.getenv("ROUTR_DS_PROVIDER") });
    system.env.push({ "var": 'ROUTR_DS_PARAMETERS', "value": System.getenv("ROUTR_DS_PARAMETERS") });
    system.env.push({ "var": 'ROUTR_CONFIG_PATH', "value": System.getenv("ROUTR_CONFIG_PATH") });
    system.env.push({ "var": 'ROUTR_SALT', "value": System.getenv("ROUTR_SALT") });
    system.env.push({ "var": 'ROUTR_EXTERN_ADDR', "value": System.getenv("ROUTR_EXTERN_ADDR") });
    system.env.push({ "var": 'ROUTR_LOCALNETS', "value": System.getenv("ROUTR_LOCALNETS") });
    system.env.push({ "var": 'ROUTR_REGISTRAR_INTF', "value": System.getenv("ROUTR_REGISTRAR_INTF") });
    return system;
}

function getConfigFromFile() {
    var config = void 0;
    try {
        if (System.getenv("ROUTR_CONFIG_FILE") != null) {
            config = _utils2.default.convertToJson(_files_util2.default.readFile(System.getenv("ROUTR_CONFIG_FILE")));
        } else {
            config = _utils2.default.convertToJson(_files_util2.default.readFile('config/config.yml'));
        }
        return config;
    } catch (e) {
        print('Unable to open configuration file');
        exit(1);
    }
}

function getSalt() {
    // Find or generate SALT
    if (System.getenv("ROUTR_SALT") != null) {
        return System.getenv("ROUTR_SALT");
    } else {
        var pathToSalt = System.getProperty("user.home") + "/.routr.salt";
        var f = new File(pathToSalt);

        if (f.exists() && !f.isDirectory()) {
            return _files_util2.default.readFile(pathToSalt);
        } else {
            var genSalt = UUID.randomUUID().toString().replaceAll("-", "");
            _files_util2.default.writeFile(pathToSalt, genSalt);
            return genSalt;
        }
    }
}