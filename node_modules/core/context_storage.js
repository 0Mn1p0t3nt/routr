"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Stores transaction information in memory. Used by processor.js and registry_helper
 *
 * @author Pedro Sanders
 * @since v1
 */
var ContextStorage = function () {
    function ContextStorage() {
        _classCallCheck(this, ContextStorage);

        this.storage = new java.util.ArrayList();
    }

    _createClass(ContextStorage, [{
        key: "saveContext",
        value: function saveContext(context) {
            this.storage.add(context);
        }
    }, {
        key: "findContext",
        value: function findContext(trans) {
            var iterator = this.storage.iterator();
            while (iterator.hasNext()) {
                var context = iterator.next();

                if (context.clientTransaction == trans || context.serverTransaction == trans) {
                    return context;
                }
            }
        }
    }, {
        key: "removeContext",
        value: function removeContext(trans) {
            var iterator = this.storage.iterator();
            while (iterator.hasNext()) {
                var context = iterator.next();

                if (context.clientTransaction == trans || context.serverTransaction == trans) {
                    iterator.remove();
                    return true;
                }
            }
            return false;
        }
    }, {
        key: "getStorage",
        value: function getStorage() {
            return this.storage;
        }
    }]);

    return ContextStorage;
}();

exports.default = ContextStorage;