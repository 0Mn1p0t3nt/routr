'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * @author Pedro Sanders
since v1



var _config_util = require('core/config_util');

var _config_util2 = _interopRequireDefault(_config_util);

var _obj_util = require('utils/obj_util');

var _obj_util2 = _interopRequireDefault(_obj_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SubnetUtils = Packages.org.apache.commons.net.util.SubnetUtils;
var cidrPattern = /^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$/;
var ipPattern = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;

var IPUtil = function () {
    function IPUtil(config) {
        _classCallCheck(this, IPUtil);

        if (!(0, _obj_util2.default)(config)) {
            this.config = config;
        } else {
            this.config = (0, _config_util2.default)();
        }
        this.localnets = this.config.spec.localnets;
    }

    _createClass(IPUtil, [{
        key: 'isLocalnet',
        value: function isLocalnet(address) {
            var localnets = this.localnets;
            if ((0, _obj_util2.default)(localnets)) throw "No localnets found";

            for (var x in localnets) {
                var subnetUtils = IPUtil.getSubnetUtils(localnets[x]);
                if (subnetUtils.getInfo().isInRange(address)) return true;
            }
            return false;
        }
    }], [{
        key: 'getSubnetUtils',
        value: function getSubnetUtils(net) {
            var subnetUtils = void 0;

            if (IPUtil.isIp(net)) {
                subnetUtils = new SubnetUtils(net + '/31');
            } else if (IPUtil.isCidr(net)) {
                subnetUtils = new SubnetUtils(net);
            } else if (IPUtil.isIpAndMask(net)) {
                var s = net.split('/');
                subnetUtils = new SubnetUtils(s[0], s[1]);
            } else {
                throw new java.lang.RuntimeException('Invalid rule notation. Must be IPv4 value, CIDR, or Ip/Mask notation.');
            }

            subnetUtils.setInclusiveHostCount(true);
            return subnetUtils;
        }
    }, {
        key: 'isIp',
        value: function isIp(v) {
            return ipPattern.test(v);
        }
    }, {
        key: 'isCidr',
        value: function isCidr(v) {
            return cidrPattern.test(v) && new java.lang.String(v).contains('/');
        }
    }, {
        key: 'isIpAndMask',
        value: function isIpAndMask(v) {
            var s = v.split('/');
            if (s.length != 2) return false;
            if (IPUtil.isIp(s[0]) && IPUtil.isIp(s[1])) return true;
            return false;
        }
    }]);

    return IPUtil;
}();

exports.default = IPUtil;