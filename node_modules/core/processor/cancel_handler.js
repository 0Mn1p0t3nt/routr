'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @author Pedro Sanders
 * @since v1
 */
var SipFactory = Packages.javax.sip.SipFactory;
var Response = Packages.javax.sip.message.Response;
var LogManager = Packages.org.apache.logging.log4j.LogManager;
var LOG = LogManager.getLogger();

var CancelHandler = function () {
    function CancelHandler(sipProvider, contextStorage) {
        _classCallCheck(this, CancelHandler);

        this.sipProvider = sipProvider;
        this.contextStorage = contextStorage;
        this.messageFactory = SipFactory.getInstance().createMessageFactory();
    }

    _createClass(CancelHandler, [{
        key: 'doProcess',
        value: function doProcess(request, serverTransaction) {
            var storage = this.contextStorage.getStorage();
            var iterator = storage.iterator();

            while (iterator.hasNext()) {
                var context = iterator.next();
                if (context.serverTransaction && context.serverTransaction.getBranchId().equals(serverTransaction.getBranchId())) {

                    var originRequest = context.requestIn;
                    var originResponse = this.messageFactory.createResponse(Response.REQUEST_TERMINATED, originRequest);
                    var cancelResponse = this.messageFactory.createResponse(Response.OK, request);
                    var cancelRequest = context.clientTransaction.createCancel();
                    var clientTransaction = this.sipProvider.getNewClientTransaction(cancelRequest);

                    context.serverTransaction.sendResponse(originResponse);
                    serverTransaction.sendResponse(cancelResponse);
                    clientTransaction.sendRequest();

                    LOG.trace('Original response: ' + originResponse);
                    LOG.trace('Cancel response: ' + cancelResponse);
                    LOG.trace('Cancel request: ' + cancelRequest);
                }
            }
            LOG.debug(request);
        }
    }]);

    return CancelHandler;
}();

exports.default = CancelHandler;