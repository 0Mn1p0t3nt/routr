'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
author Pedro Sanders
since v1



var _request_processor = require('core/processor/request_processor');

var _request_processor2 = _interopRequireDefault(_request_processor);

var _response_processor = require('core/processor/response_processor');

var _response_processor2 = _interopRequireDefault(_response_processor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SipListener = Packages.javax.sip.SipListener;
var LogManager = Packages.org.apache.logging.log4j.LogManager;
var LOG = LogManager.getLogger();

var Processor = function () {
    function Processor(sipProvider, locator, registry, registrar, dataAPIs, contextStorage) {
        _classCallCheck(this, Processor);

        this.contextStorage = contextStorage;
        this.requestProcessor = new _request_processor2.default(sipProvider, locator, registrar, dataAPIs, contextStorage);
        this.responseProcessor = new _response_processor2.default(sipProvider, locator, registry, registrar, dataAPIs, contextStorage);
    }

    _createClass(Processor, [{
        key: 'listener',
        get: function get() {
            var requestProcessor = this.requestProcessor;
            var responseProcessor = this.responseProcessor;

            return new SipListener({
                processRequest: function processRequest(event) {
                    try {
                        requestProcessor.process(event);
                    } catch (e) {
                        LOG.error(e);
                    }
                },

                processResponse: function processResponse(event) {
                    try {
                        responseProcessor.process(event);
                    } catch (e) {
                        LOG.error(e);
                    }
                },

                processTransactionTerminated: function processTransactionTerminated(event) {
                    if (event.isServerTransaction()) {
                        var serverTransaction = event.getServerTransaction();

                        if (!this.contextStorage.removeContext(serverTransaction)) {
                            LOG.trace("Ongoing Transaction");
                        }
                    }
                },

                processDialogTerminated: function processDialogTerminated(event) {
                    LOG.trace('Dialog ' + event.getDialog() + ' has been terminated');
                },

                processTimeout: function processTimeout(event) {
                    LOG.trace('Transaction Time out');
                }
            });
        }
    }]);

    return Processor;
}();

exports.default = Processor;