'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
author Pedro Sanders
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * @since v1



var _auth_helper = require('utils/auth_helper');

var _auth_helper2 = _interopRequireDefault(_auth_helper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SipFactory = Packages.javax.sip.SipFactory;
var ToHeader = Packages.javax.sip.header.ToHeader;
var ContactHeader = Packages.javax.sip.header.ContactHeader;
var ExpiresHeader = Packages.javax.sip.header.ExpiresHeader;
var AuthorizationHeader = Packages.javax.sip.header.AuthorizationHeader;
var Response = Packages.javax.sip.message.Response;
var LogManager = Packages.org.apache.logging.log4j.LogManager;
var LOG = LogManager.getLogger();

var RegisterHandler = function () {
    function RegisterHandler(locator, registrar) {
        _classCallCheck(this, RegisterHandler);

        this.locator = locator;
        this.registrar = registrar;
        this.messageFactory = SipFactory.getInstance().createMessageFactory();
        this.headerFactory = SipFactory.getInstance().createHeaderFactory();
        this.authHelper = new _auth_helper2.default(this.headerFactory);
    }

    _createClass(RegisterHandler, [{
        key: 'doProcess',
        value: function doProcess(request, transaction) {
            var authHeader = request.getHeader(AuthorizationHeader.NAME);
            var expHeader = this.getExpHeader(request);

            if (expHeader.getExpires() <= 0) {
                return this.removeEndpoint(request, transaction);
            }

            if (authHeader == null) {
                return this.sendUnauthorized(request, transaction);
            }

            this.registrar.register(request) ? this.sendOk(request, transaction) : this.sendUnauthorized(request, transaction);
        }
    }, {
        key: 'getExpHeader',
        value: function getExpHeader(request) {
            var expires = void 0;
            if (request.getHeader(ExpiresHeader.NAME)) {
                expires = request.getHeader(ExpiresHeader.NAME).getExpires();
            } else {
                expires = RegisterHandler.getContactHeader(request).getExpires();
            }
            return this.headerFactory.createExpiresHeader(expires);
        }

        // See: Removing bindings -> https://tools.ietf.org/html/rfc3261#section-10.2.2

    }, {
        key: 'removeEndpoint',
        value: function removeEndpoint(request, transaction) {
            var contactHeader = RegisterHandler.getContactHeader(request);
            var contactURI = contactHeader.getAddress().getURI();
            var addressOfRecord = RegisterHandler.getAddressOfRecord(request);

            if (contactHeader.getAddress().isWildcard()) {
                this.locator.removeEndpoint(addressOfRecord, contactURI);
            } else {
                this.locator.removeEndpoint(addressOfRecord);
            }
            this.sendOk(request, transaction);
        }
    }, {
        key: 'sendOk',
        value: function sendOk(request, transaction) {
            var ok = this.messageFactory.createResponse(Response.OK, request);
            ok.addHeader(RegisterHandler.getContactHeader(request));
            ok.addHeader(this.getExpHeader(request));
            transaction.sendResponse(ok);
            LOG.debug(ok);
        }
    }, {
        key: 'sendUnauthorized',
        value: function sendUnauthorized(request, transaction) {
            var realm = RegisterHandler.getAddressOfRecord(request).getHost();
            var unauthorized = this.messageFactory.createResponse(Response.UNAUTHORIZED, request);
            unauthorized.addHeader(this.authHelper.generateChallenge(realm));
            transaction.sendResponse(unauthorized);
            LOG.debug(unauthorized);
        }
    }], [{
        key: 'getContactHeader',
        value: function getContactHeader(request) {
            return request.getHeader(ContactHeader.NAME);
        }
    }, {
        key: 'getAddressOfRecord',
        value: function getAddressOfRecord(request) {
            var toHeader = request.getHeader(ToHeader.NAME);
            return toHeader.getAddress().getURI();
        }
    }]);

    return RegisterHandler;
}();

exports.default = RegisterHandler;