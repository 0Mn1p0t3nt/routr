'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * @author Pedro Sanders
since v1



var _utils = require('core/processor/utils');

var _utils2 = _interopRequireDefault(_utils);

var _register_handler = require('core/processor/register_handler');

var _register_handler2 = _interopRequireDefault(_register_handler);

var _cancel_handler = require('core/processor/cancel_handler');

var _cancel_handler2 = _interopRequireDefault(_cancel_handler);

var _request_handler = require('core/processor/request_handler');

var _request_handler2 = _interopRequireDefault(_request_handler);

var _route_info = require('core/processor/route_info');

var _route_info2 = _interopRequireDefault(_route_info);

var _config_util = require('core/config_util');

var _config_util2 = _interopRequireDefault(_config_util);

var _acl_util = require('core/acl/acl_util');

var _acl_util2 = _interopRequireDefault(_acl_util);

var _routing_type = require('core/routing_type');

var _status = require('core/status');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SipFactory = Packages.javax.sip.SipFactory;
var Request = Packages.javax.sip.message.Request;
var Response = Packages.javax.sip.message.Response;

var RequestProcessor = function () {
    function RequestProcessor(sipProvider, locator, registrar, dataAPIs, contextStorage) {
        _classCallCheck(this, RequestProcessor);

        this.sipProvider = sipProvider;
        this.contextStorage = contextStorage;
        this.locator = locator;
        this.registrar = registrar;
        this.dataAPIs = dataAPIs;
        this.domainsAPI = dataAPIs.DomainsAPI;
        this.messageFactory = SipFactory.getInstance().createMessageFactory();
        this.config = (0, _config_util2.default)();
    }

    _createClass(RequestProcessor, [{
        key: 'process',
        value: function process(event) {
            var request = event.getRequest();
            var serverTransaction = event.getServerTransaction();

            if (serverTransaction == null && request.getMethod().equals(Request.ACK) == false) {
                serverTransaction = this.sipProvider.getNewServerTransaction(request);
            }

            var procUtils = new _utils2.default(request, serverTransaction, this.messageFactory);

            if (this.allowedAccess(event) == false) {
                return procUtils.sendResponse(Response.FORBIDDEN);
            }

            switch (request.getMethod()) {
                case Request.REGISTER:
                    new _register_handler2.default(this.locator, this.registrar).doProcess(request, serverTransaction);
                    break;
                case Request.CANCEL:
                    new _cancel_handler2.default(this.sipProvider, this.contextStorage).doProcess(request, serverTransaction);
                    break;
                default:
                    new _request_handler2.default(this.locator, this.sipProvider, this.dataAPIs, this.contextStorage).doProcess(request, serverTransaction);
            }
        }
    }, {
        key: 'allowedAccess',
        value: function allowedAccess(event) {
            var request = event.getRequest();
            var remoteIp = event.getRemoteIpAddress();
            var routeInfo = new _route_info2.default(request, this.dataAPIs);
            var acl = this.config.spec.accessControlList;

            if (acl) {
                if (new _acl_util2.default(acl).isIpAllowed(remoteIp) == false) {
                    return false;
                }
            }

            var addressOfRecord = _utils2.default.getAOR(request);

            if (routeInfo.getRoutingType().equals(_routing_type.RoutingType.INTRA_DOMAIN_ROUTING)) {
                var response = this.domainsAPI.getDomainByUri(addressOfRecord.getHost());
                if (response.status == _status.Status.OK) {
                    var _acl = response.result.spec.context.accessControlList;
                    if (_acl && new _acl_util2.default(_acl).isIpAllowed(remoteIp) == false) {
                        return false;
                    }
                }
            }
            return true;
        }
    }]);

    return RequestProcessor;
}();

exports.default = RequestProcessor;