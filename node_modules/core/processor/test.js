'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.testGroup = undefined;

var _files_datasource = require('data_api/files_datasource');

var _files_datasource2 = _interopRequireDefault(_files_datasource);

var _gateways_api = require('data_api/gateways_api');

var _gateways_api2 = _interopRequireDefault(_gateways_api);

var _peers_api = require('data_api/peers_api');

var _peers_api2 = _interopRequireDefault(_peers_api);

var _dids_api = require('data_api/dids_api');

var _dids_api2 = _interopRequireDefault(_dids_api);

var _domains_api = require('data_api/domains_api');

var _domains_api2 = _interopRequireDefault(_domains_api);

var _agents_api = require('data_api/agents_api');

var _agents_api2 = _interopRequireDefault(_agents_api);

var _route_info = require('core/processor/route_info');

var _route_info2 = _interopRequireDefault(_route_info);

var _config_util = require('core/config_util.js');

var _config_util2 = _interopRequireDefault(_config_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @author Pedro Sanders
 * @since v1
 *
 * Unit Test for core functionalities
 */
var sipFactory = Packages.javax.sip.SipFactory.getInstance();
var messageFactory = sipFactory.createMessageFactory();
var headerFactory = sipFactory.createHeaderFactory();
var addressFactory = sipFactory.createAddressFactory();
var SipUtils = Packages.gov.nist.javax.sip.Utils;
var Request = Packages.javax.sip.message.Request;
var userAgent = new java.util.ArrayList();
userAgent.add('Test I/O v1.0');

var config = (0, _config_util2.default)();
// Forces data source to use its own default parameters...
delete config.spec.dataSource.parameters;

var ds = new _files_datasource2.default(config);

var dataAPIs = {
    AgentsAPI: new _agents_api2.default(ds),
    DomainsAPI: new _domains_api2.default(ds),
    DIDsAPI: new _dids_api2.default(ds),
    GatewaysAPI: new _gateways_api2.default(ds),
    PeersAPI: new _peers_api2.default(ds)
};

var testGroup = exports.testGroup = { name: "Core Processor Module"

    // Tests
};testGroup.caller_type = function () {
    var request = getRequest('1001@sip.local', '1002@sip.local');
    var routeInfo = new _route_info2.default(request, dataAPIs);
    assertEquals(routeInfo.getCallerType(), 'AGENT');
    assertEquals(routeInfo.getCalleeType(), 'AGENT');
    assertTrue(routeInfo.isSameDomain());
};

// Tests
testGroup.routing_type = function () {
    // Same Domain
    var request = getRequest('1001@sip.local', '1002@sip.local');
    var routeInfo = new _route_info2.default(request, dataAPIs);
    assertEquals('INTRA_DOMAIN_ROUTING', routeInfo.getRoutingType());

    // Different domain but both domains exist
    request = getRequest('1001@sip.local', '4001@sip2.local');
    routeInfo = new _route_info2.default(request, dataAPIs);
    assertEquals('INTER_DOMAIN_ROUTING', routeInfo.getRoutingType());

    // Call to the PSTN
    request = getRequest('1001@sip.local', '17853178070@sip.local');
    routeInfo = new _route_info2.default(request, dataAPIs);
    assertEquals('DOMAIN_EGRESS_ROUTING', routeInfo.getRoutingType());

    // Call from the PSTN
    request = getRequest('17853178070@sip.provider.com', '0000000000@sip.provider.com');
    routeInfo = new _route_info2.default(request, dataAPIs);
    assertEquals('DOMAIN_INGRESS_ROUTING', routeInfo.getRoutingType());

    // Peer call
    request = getRequest('0000000000@sip.provider.com', '17853178070@sip.provider.com');
    routeInfo = new _route_info2.default(request, dataAPIs);
    assertEquals('PEER_EGRESS_ROUTING', routeInfo.getRoutingType());

    // Peer call
    request = getRequest('ast@astserver', '17853178070@sip.provider.com');
    routeInfo = new _route_info2.default(request, dataAPIs);
    assertEquals('PEER_EGRESS_ROUTING', routeInfo.getRoutingType());
};

function getRequest(from, to) {
    var port = 5060;
    var host = '192.168.1.2';
    var cseq = 0;
    var viaHeaders = [];
    var viaHeader = headerFactory.createViaHeader(host, port, 'udp', null);
    // Request RPort for Symmetric Response Routing in accordance with RFC 3581
    viaHeader.setRPort();
    viaHeaders.push(viaHeader);

    var maxForwardsHeader = headerFactory.createMaxForwardsHeader(70);
    var callIdHeader = headerFactory.createCallIdHeader('call0001');
    var cSeqHeader = headerFactory.createCSeqHeader(cseq, Request.REGISTER);
    var fromAddress = addressFactory.createAddress('sip:' + from);
    var fromHeader = headerFactory.createFromHeader(fromAddress, new SipUtils().generateTag());

    var toAddress = addressFactory.createAddress('sip:' + to);
    var toHeader = headerFactory.createToHeader(toAddress, null);
    var expireHeader = headerFactory.createExpiresHeader(3600);
    var contactAddress = addressFactory.createAddress('sip:' + from + ':' + port);
    var contactHeader = headerFactory.createContactHeader(contactAddress);
    var userAgentHeader = headerFactory.createUserAgentHeader(userAgent);

    var request = messageFactory.createRequest('INVITE sip:sip.provider.net SIP/2.0\r\n\r\n');
    request.addHeader(viaHeader);
    request.addHeader(maxForwardsHeader);
    request.addHeader(callIdHeader);
    request.addHeader(cSeqHeader);
    request.addHeader(fromHeader);
    request.addHeader(toHeader);
    request.addHeader(contactHeader);
    request.addHeader(userAgentHeader);
    request.addHeader(headerFactory.createAllowHeader('INVITE'));
    request.addHeader(headerFactory.createAllowHeader('ACK'));
    request.addHeader(headerFactory.createAllowHeader('BYE'));
    request.addHeader(headerFactory.createAllowHeader('CANCEL'));
    request.addHeader(headerFactory.createAllowHeader('REGISTER'));
    request.addHeader(headerFactory.createAllowHeader('OPTIONS'));
    request.addHeader(expireHeader);

    return request;
}