'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _config_util = require('core/config_util.js');

var _config_util2 = _interopRequireDefault(_config_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @author Pedro Sanders
 * @since v1
 */
var SipFactory = Packages.javax.sip.SipFactory;
var ToHeader = Packages.javax.sip.header.ToHeader;

var ProcessorUtils = function () {
    function ProcessorUtils(request, serverTransaction, messageFactory) {
        _classCallCheck(this, ProcessorUtils);

        this.request = request;
        this.st = serverTransaction;
        this.messageFactory = messageFactory;
    }

    _createClass(ProcessorUtils, [{
        key: 'sendResponse',
        value: function sendResponse(responseType) {
            this.st.sendResponse(this.messageFactory.createResponse(responseType, this.request));
        }

        /**
          * Discover DIDs sent via a non-standard header
          * The header must be added at config.spec.addressInfo[*]
          * If the such header is present then overwrite the AOR
          */

    }], [{
        key: 'getAOR',
        value: function getAOR(request) {
            var addressInfo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

            for (var x in addressInfo) {
                var info = addressInfo[x];
                if (request.getHeader(info) != undefined) {
                    var v = request.getHeader(info).getValue();
                    if (/sips?:.*@.*/.test(v) || /tel:\d+/.test(v)) {
                        var addressFactory = SipFactory.getInstance().createAddressFactory();
                        return addressFactory.createURI(v);
                    }
                    LOG.error('Invalid address: ' + v);
                }
            }

            return (0, _config_util2.default)().spec.useToAsAOR ? request.getHeader(ToHeader.NAME).getAddress().getURI() : request.getRequestURI();
        }
    }]);

    return ProcessorUtils;
}();

exports.default = ProcessorUtils;