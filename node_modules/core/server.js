'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
author Pedro Sanders
since v1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */


var _processor = require('core/processor/processor');

var _processor2 = _interopRequireDefault(_processor);

var _context_storage = require('core/context_storage');

var _context_storage2 = _interopRequireDefault(_context_storage);

var _registry = require('registry/registry');

var _registry2 = _interopRequireDefault(_registry);

var _rest = require('rest/rest');

var _rest2 = _interopRequireDefault(_rest);

var _config_util = require('core/config_util.js');

var _config_util2 = _interopRequireDefault(_config_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SipFactory = Packages.javax.sip.SipFactory;
var Properties = Packages.java.util.Properties;
var LogManager = Packages.org.apache.logging.log4j.LogManager;
var LOG = LogManager.getLogger();
var ANSI_GREEN = '\x1B[32m';
var ANSI_YELLOW = '\x1B[33m';
var ANSI_RESET = '\x1B[0m';

var Server = function () {
    function Server(locator, registrar, dataAPIs) {
        _classCallCheck(this, Server);

        this.locator = locator;
        this.registrar = registrar;
        this.dataAPIs = dataAPIs;
        this.contextStorage = new _context_storage2.default();
        this.config = (0, _config_util2.default)();
        // Not sure if this is a good idea in terms of performance
        this.host = this.config.spec.bindAddr;
    }

    _createClass(Server, [{
        key: 'buildSipProvider',
        value: function buildSipProvider(transport) {
            var defListeningPoint = this.sipStack.createListeningPoint(transport[0].port, transport[0].protocol.toLowerCase());
            var sipProvider = this.sipStack.createSipProvider(defListeningPoint);

            for (var key in transport) {
                var curTransport = transport[key];
                var proto = curTransport.protocol.toLowerCase();

                if ((proto == 'wss' || proto == 'tls') && !this.config.spec.securityContext) {
                    LOG.warn(ANSI_YELLOW + 'Security context could not found. Ignoring protocol: ' + proto + ANSI_RESET);
                    continue;
                }

                if (curTransport.bindAddr == undefined) {
                    curTransport.bindAddr = this.host;
                }

                var lp = this.sipStack.createListeningPoint(curTransport.bindAddr, curTransport.port, proto);
                sipProvider.addListeningPoint(lp);

                LOG.info('Listening  on ' + ANSI_GREEN + curTransport.bindAddr + ':' + curTransport.port + ' [' + proto + ']' + ANSI_RESET);
            }

            return sipProvider;
        }
    }, {
        key: 'showExternInfo',
        value: function showExternInfo() {
            if (this.config.spec.externAddr) {
                LOG.info("ExternAddr is " + ANSI_GREEN + this.config.spec.externAddr + ANSI_RESET);

                if (this.config.spec.localnets) {
                    LOG.info("Localnets  is " + ANSI_GREEN + this.config.spec.localnets.join(",") + ANSI_RESET);
                }
            }
        }
    }, {
        key: 'setup',
        value: function setup() {
            this.showExternInfo();

            if (this.config.spec.securityContext.debugging) {
                Packages.java.lang.System.setProperty('javax.net.debug', 'ssl');
            }

            var sipFactory = SipFactory.getInstance();
            sipFactory.setPathName('gov.nist');

            this.sipStack = sipFactory.createSipStack(this.getProperties());

            var sipProvider = this.buildSipProvider(this.config.spec.transport);

            this.registry = new _registry2.default(sipProvider, this.dataAPIs);

            var processor = new _processor2.default(sipProvider, this.locator, this.registry, this.registrar, this.dataAPIs, this.contextStorage);

            sipProvider.addSipListener(processor.listener);
        }
    }, {
        key: 'start',
        value: function start() {
            LOG.info('Starting Routr');
            this.setup();
            this.locator.start();
            this.registry.start();
            this.restService = new _rest2.default(this, this.locator, this.registry, this.dataAPIs);
            this.restService.start();
            java.lang.Thread.sleep(java.lang.Long.MAX_VALUE);
        }
    }, {
        key: 'stop',
        value: function stop() {
            LOG.info('Stopping server');
            this.restService.stop();
            this.sipStack.stop();
            this.locator.stop();
            exit(0);
        }
    }, {
        key: 'getProperties',
        value: function getProperties() {
            var properties = new Properties();
            // See https://github.com/RestComm/jain-sip/blob/master/src/gov/nist/javax/sip/SipStackImpl.java for
            // many other options
            properties.setProperty('javax.sip.STACK_NAME', 'routr');
            // Default host
            properties.setProperty('javax.sip.IP_ADDRESS', this.host);
            properties.setProperty('javax.sip.AUTOMATIC_DIALOG_SUPPORT', 'OFF');
            // Guard against denial of service attack.
            properties.setProperty('gov.nist.javax.sip.MAX_MESSAGE_SIZE', '1048576');
            // Drop the client connection after we are done with the transaction.
            properties.setProperty('gov.nist.javax.sip.CACHE_CLIENT_CONNECTIONS', 'false');
            properties.setProperty('gov.nist.javax.sip.TRACE_LEVEL', this.config.spec.logging.traceLevel);
            properties.setProperty('gov.nist.javax.sip.MESSAGE_PROCESSOR_FACTORY', 'gov.nist.javax.sip.stack.NioMessageProcessorFactory');
            properties.setProperty('gov.nist.javax.sip.PATCH_SIP_WEBSOCKETS_HEADERS', 'false');

            // See https://groups.google.com/forum/#!topic/mobicents-public/U_c7aLAJ_MU for useful info
            if (this.config.spec.securityContext) {
                properties.setProperty('gov.nist.javax.sip.TLS_CLIENT_PROTOCOLS', this.config.spec.securityContext.client.protocols.join());
                // This must be set to 'Disabled' when using WSS
                properties.setProperty('gov.nist.javax.sip.TLS_CLIENT_AUTH_TYPE', this.config.spec.securityContext.client.authType);
                properties.setProperty('javax.net.ssl.keyStore', this.config.spec.securityContext.keyStore);
                properties.setProperty('javax.net.ssl.trustStore', this.config.spec.securityContext.trustStore);
                properties.setProperty('javax.net.ssl.keyStorePassword', this.config.spec.securityContext.keyStorePassword);
                properties.setProperty('javax.net.ssl.keyStoreType', this.config.spec.securityContext.keyStoreType);
            }
            return properties;
        }
    }]);

    return Server;
}();

exports.default = Server;