'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
author Pedro Sanders
since v1



var _utils = require('core/utils');

var _utils2 = _interopRequireDefault(_utils);

var _utils3 = require('data_api/utils');

var _utils4 = _interopRequireDefault(_utils3);

var _status = require('core/status');

var _obj_util = require('utils/obj_util');

var _obj_util2 = _interopRequireDefault(_obj_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AgentsAPI = function () {
    function AgentsAPI(dataSource) {
        _classCallCheck(this, AgentsAPI);

        this.ds = dataSource;
    }

    _createClass(AgentsAPI, [{
        key: 'save',
        value: function save(agent, operation) {
            if (!this.doesDomainExist(agent)) {
                return _status.UNFULFILLED_DEPENDENCY_RESPONSE;
            } else if (this.existInAnotherDomain(agent)) {
                return _utils2.default.buildResponse(_status.Status.CONFLICT);
            }
            return operation == 'insert' ? this.ds.insert(agent) : this.ds.update(agent);
        }
    }, {
        key: 'createFromJSON',
        value: function createFromJSON(agent) {
            return this.save(agent, 'insert');
        }
    }, {
        key: 'updateFromJSON',
        value: function updateFromJSON(agent) {
            return this.save(agent, 'update');
        }
    }, {
        key: 'getAgents',
        value: function getAgents(filter) {
            return this.ds.withCollection('agents').find(filter);
        }
    }, {
        key: 'getAgentByDomain',
        value: function getAgentByDomain(domainUri, username) {
            var response = this.getAgents();
            var agent = void 0;
            response.result.forEach(function (obj) {
                if (obj.spec.credentials.username == username) {
                    obj.spec.domains.forEach(function (d) {
                        if (domainUri == d) {
                            agent = obj;
                        }
                    });
                }
            });

            return (0, _obj_util2.default)(agent) ? _utils2.default.buildResponse(_status.Status.NOT_FOUND) : _utils2.default.buildResponse(_status.Status.OK, agent);
        }
    }, {
        key: 'getAgentByRef',
        value: function getAgentByRef(ref) {
            return _utils4.default.deepSearch(this.getAgents(), "metadata.ref", ref);
        }

        /**
         * Takes either one argument(ref) or two arguments(domainUri and username)
         */

    }, {
        key: 'getAgent',
        value: function getAgent(arg1, arg2) {
            return arguments.length == 2 ? this.getAgentByDomain(arg1, arg2) : this.getAgentByRef(arg1);
        }
    }, {
        key: 'agentExist',
        value: function agentExist(domainUri, username) {
            return _utils4.default.objExist(this.getAgent(domainUri, username));
        }
    }, {
        key: 'deleteAgent',
        value: function deleteAgent(ref) {
            return this.ds.withCollection('agents').remove(ref);
        }
    }, {
        key: 'existInAnotherDomain',
        value: function existInAnotherDomain(agent) {
            var response = this.getAgents("@.spec.credentials.username==" + agent.spec.credentials.username);
            for (var x in response.result) {
                var curAgent = response.result[x];
                for (var y in curAgent.spec.domains) {
                    var curDomain = curAgent.spec.domains[y];
                    if (agent.spec.domains.indexOf(curDomain) != -1) {
                        return true;
                    }
                }
            }
            return false;
        }
    }, {
        key: 'doesDomainExist',
        value: function doesDomainExist(agent) {
            var domains = JSON.stringify(agent.spec.domains).replaceAll("\"", "'");
            var response = this.ds.withCollection('domains').find("@.spec.context.domainUri in " + domains);
            return response.result.length != agent.spec.domains.length ? false : true;
        }
    }]);

    return AgentsAPI;
}();

exports.default = AgentsAPI;