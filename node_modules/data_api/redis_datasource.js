'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
author Pedro Sanders
since v1



var _utils = require('core/utils');

var _utils2 = _interopRequireDefault(_utils);

var _utils3 = require('data_api/utils');

var _utils4 = _interopRequireDefault(_utils3);

var _status = require('core/status');

var _config_util = require('core/config_util');

var _config_util2 = _interopRequireDefault(_config_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var JedisPoolConfig = Packages.redis.clients.jedis.JedisPoolConfig;
var JedisPool = Packages.redis.clients.jedis.JedisPool;
var ObjectId = Packages.org.bson.types.ObjectId;
var JsonPath = Packages.com.jayway.jsonpath.JsonPath;
var InvalidPathException = Packages.com.jayway.jsonpath.InvalidPathException;
var LogManager = Packages.org.apache.logging.log4j.LogManager;
var LOG = LogManager.getLogger();
var badRequest = { status: _status.Status.BAD_REQUEST, message: _status.Status.message[_status.Status.BAD_REQUEST].value };
var defaultRedisParameters = { host: 'localhost', port: '6379' };
var defUser = {
    kind: 'User',
    metadata: {
        name: 'Ctl'
    },
    spec: {
        credentials: {
            username: 'admin',
            secret: 'changeit'
        }
    }
};

var RedisDataSource = function () {
    function RedisDataSource() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _config_util2.default)();

        _classCallCheck(this, RedisDataSource);

        var parameters = _utils4.default.getParameters(config, defaultRedisParameters, ['host', 'port', 'secret']);

        this.jedisPool = new JedisPool(parameters.host, parameters.port);

        if (parameters.secret) {
            this.jedisPool.auth(parameters.secret);
        }

        if (this.withCollection('users').find().result.length == 0) {
            LOG.info("No user found. Creating default 'admin' user.");
            this.createDefaultUser(config.system.apiVersion);
        }
    }

    _createClass(RedisDataSource, [{
        key: 'buildPoolConfig',
        value: function buildPoolConfig() {
            var poolConfig = new JedisPoolConfig();
            poolConfig.setMaxTotal(128);
            poolConfig.setMaxIdle(128);
            poolConfig.setMinIdle(16);
            poolConfig.setTestOnBorrow(true);
            poolConfig.setTestOnReturn(true);
            poolConfig.setTestWhileIdle(true);
            poolConfig.setMinEvictableIdleTimeMillis(Duration.ofSeconds(60).toMillis());
            poolConfig.setTimeBetweenEvictionRunsMillis(Duration.ofSeconds(30).toMillis());
            poolConfig.setNumTestsPerEvictionRun(3);
            poolConfig.setBlockWhenExhausted(true);
            return poolConfig;
        }
    }, {
        key: 'createDefaultUser',
        value: function createDefaultUser(apiVersion) {
            defUser.apiVersion = apiVersion;
            this.insert(defUser);
        }
    }, {
        key: 'withCollection',
        value: function withCollection(collection) {
            this.collection = collection;
            return this;
        }
    }, {
        key: 'insert',
        value: function insert(obj) {
            var jedis = void 0;

            try {
                if (!_utils4.default.isValidEntity(obj)) {
                    return badRequest;
                }

                if (!obj.metadata.ref) {
                    obj.metadata.ref = new ObjectId().toString();
                }

                jedis = this.jedisPool.getResource();
                jedis.set(obj.metadata.ref, JSON.stringify(obj));

                var kind = _utils4.default.getKind(obj);
                jedis.sadd(kind.toLowerCase() + 's', obj.metadata.ref);

                return _utils2.default.buildResponse(_status.Status.CREATED, obj.metadata.ref);
            } catch (e) {
                return _utils2.default.buildErrResponse(e);
            } finally {
                if (jedis) {
                    jedis.close();
                }
            }
        }
    }, {
        key: 'get',
        value: function get(ref) {
            var jedis = void 0;

            try {
                jedis = this.jedisPool.getResource();
                var result = jedis.get(obj.metadata.ref);
                return result == null ? _utils2.default.buildResponse(_status.Status.NOT_FOUND) : _utils2.default.buildResponse(_status.Status.OK, result);
            } catch (e) {
                return _utils2.default.buildErrResponse(e);
            } finally {
                if (jedis) {
                    jedis.close();
                }
            }
        }
    }, {
        key: 'find',
        value: function find(filter) {
            var list = [];
            var jedis = void 0;

            try {
                jedis = this.jedisPool.getResource();
                jedis.smembers(this.collection).forEach(function (ref) {
                    return list.push(JSON.parse(jedis.get(ref)));
                });

                if (list.length == 0) {
                    return _utils2.default.buildResponse(_status.Status.OK, []);
                }
                // JsonPath does not parse properly when using Json objects from JavaScript
                list = JsonPath.parse(JSON.stringify(list)).read(_utils4.default.transformFilter(filter)).toJSONString();

                return _utils2.default.buildResponse(_status.Status.OK, JSON.parse(list));
            } catch (e) {
                return e instanceof InvalidPathException ? _utils2.default.buildResponse(_status.Status.BAD_REQUEST, null, e) : _utils2.default.buildErrResponse(e);
            } finally {
                if (jedis) {
                    jedis.close();
                }
            }
        }
    }, {
        key: 'update',
        value: function update(obj) {
            if (!_utils4.default.isValidEntity(obj)) {
                return badRequest;
            }

            var jedis = void 0;

            try {
                jedis = this.jedisPool.getResource();
                jedis.set(obj.metadata.ref, JSON.stringify(obj));

                return _utils2.default.buildResponse(_status.Status.OK, obj.metadata.ref);
            } catch (e) {
                return e instanceof InvalidPathException ? _utils2.default.buildResponse(_status.Status.BAD_REQUEST, null, e) : _utils2.default.buildErrResponse(e);
            } finally {
                if (jedis) {
                    jedis.close();
                }
            }
        }
    }, {
        key: 'remove',
        value: function remove(ref) {
            var jedis = void 0;

            try {
                jedis = this.jedisPool.getResource();
                var cnt = jedis.del(ref);

                if (cnt == 0) {
                    return _utils2.default.buildResponse(_status.Status.NOT_FOUND);
                }

                cnt = jedis.srem(this.collection, ref);

                return cnt == 0 ? _utils2.default.buildResponse(_status.Status.NOT_FOUND) : _utils2.default.buildResponse(_status.Status.OK);
            } catch (e) {
                return _utils2.default.buildErrResponse(e);
            } finally {
                if (jedis) {
                    jedis.close();
                }
            }
        }
    }]);

    return RedisDataSource;
}();

exports.default = RedisDataSource;