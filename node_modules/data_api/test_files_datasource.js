'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.testGroup = undefined;

var _files_datasource = require('data_api/files_datasource');

var _files_datasource2 = _interopRequireDefault(_files_datasource);

var _files_util = require('utils/files_util');

var _files_util2 = _interopRequireDefault(_files_util);

var _utils = require('data_api/utils');

var _utils2 = _interopRequireDefault(_utils);

var _status = require('core/status');

var _config_util = require('core/config_util.js');

var _config_util2 = _interopRequireDefault(_config_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var testGroup = exports.testGroup = { name: "Files Data Source" }; /**
                                                                    * @author Pedro Sanders
                                                                    * @since v1
                                                                    *
                                                                    * Unit Test for the "Files Data Source"
                                                                    */


var config = (0, _config_util2.default)();
// Forces data source to use its own default parameters...
delete config.spec.dataSource.parameters;

var ds = new _files_datasource2.default(config);

testGroup.yaml_from_file = function () {
    var jsonObj = _utils2.default.convertToJson(_files_util2.default.readFile('config/agents.yml'));
    assertTrue(jsonObj instanceof Object);
};

testGroup.get_collections = function () {
    var response = ds.withCollection('agents').find();
    assertTrue(response.status == _status.Status.OK);
    // Existing Agent
    response = ds.withCollection('agents').find("@.spec.credentials.username=='1001'");
    assertTrue(response.status == _status.Status.OK);
    // Non-Existing Agent
    response = ds.withCollection('agents').find("@.spec.credentials.username=='mike'");
    assertTrue(response.result.length == 0);
    // Invalid filter
    response = ds.withCollection('agents').find("@.spec.credentials.username==1001'");
    assertTrue(response.status == _status.Status.BAD_REQUEST);
};