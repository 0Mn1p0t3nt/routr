'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.testGroup = undefined;

var _redis_datasource = require('data_api/redis_datasource');

var _redis_datasource2 = _interopRequireDefault(_redis_datasource);

var _agents_api = require('data_api/agents_api');

var _agents_api2 = _interopRequireDefault(_agents_api);

var _status = require('core/status');

var _test_utils = require('data_api/test_utils.js');

var _test_utils2 = _interopRequireDefault(_test_utils);

var _config_util = require('core/config_util.js');

var _config_util2 = _interopRequireDefault(_config_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ObjectId = Packages.org.bson.types.ObjectId; /**
                                                  * @author Pedro Sanders
                                                  * @since v1
                                                  *
                                                  * Unit Test for the "Redis Data Source"
                                                  */
var testGroup = exports.testGroup = { name: "Redis Data Source", enabled: false };

var config = (0, _config_util2.default)();
// To force RedisDataSource to use its own default parameters...
delete config.spec.dataSource.parameters;

var ds = new _redis_datasource2.default(config);
var agentsApi = new _agents_api2.default(ds);

testGroup.basic_operations = function () {
    var agent = _test_utils2.default.buildAgent('John Doe', ['sip.local'], '1001');

    var initSize = ds.withCollection('agents').find().result.length;
    var response = ds.insert(agent);
    var endSize = ds.withCollection('agents').find().result.length;

    assertTrue(ObjectId.isValid(response.result));
    assertTrue(endSize == initSize + 1);
    assertTrue(agent.metadata.name.equals('John Doe'));

    ds.withCollection('agents').remove(response.result);
    endSize = ds.withCollection('agents').find().result.length;
    assertTrue(initSize == endSize);
};

testGroup.get_collections = function () {
    var agent = _test_utils2.default.buildAgent('John Doe', ['sip.local'], '1001');
    var initSize = ds.withCollection('agents').find().result.length;
    var ref = ds.insert(agent).result;

    // Existing Agent
    var response = ds.withCollection('agents').find("@.spec.credentials.username==1001");
    assertTrue(response.status == _status.Status.OK);

    // Non-Existing Agent
    response = ds.withCollection('agents').find("@.spec.credentials.username=='peter'");
    assertTrue(response.result.length == 0);

    // Invalid filter
    response = ds.withCollection('agents').find("@.spec.credentials.username==mike'");
    assertTrue(response.status == _status.Status.BAD_REQUEST);

    ds.withCollection('agents').remove(ref);
    var endSize = ds.withCollection('agents').find().result.length;
    assertTrue(initSize == endSize);
};

// This also validates the other resources
testGroup.get_agents = function () {
    var john = _test_utils2.default.buildAgent('John Doe', ['sip.local'], '1001');
    var jane = _test_utils2.default.buildAgent('Jane Doe', ['sip.local'], '1002');

    var ref1 = ds.insert(john).result;
    var ref2 = ds.insert(jane).result;

    var l = ds.withCollection('agents').find("'sip.local' in @.spec.domains").result;

    assertTrue(l.length == 2);

    // NOTE: The space will not work in the console because is considered another parameter
    var response = agentsApi.getAgents("@.spec.credentials.username=='1001' || @.spec.credentials.username=='1002'");

    assertTrue(response.status == _status.Status.OK);
    assertTrue(response.result.length == 2);

    // Cleanup
    ds.withCollection('agents').remove(ref1);
    ds.withCollection('agents').remove(ref2);
};

// This also validates the other resources
testGroup.get_agent = function () {
    var agent = _test_utils2.default.buildAgent('John Doe', ['sip.local'], '1001');
    agent.metadata.ref = 'ag3f77f6';
    var ref = ds.insert(agent).result;
    var response = agentsApi.getAgent('ag3f77f6');
    assertTrue(response.status == _status.Status.OK);
    assertTrue(response.result.kind == 'Agent');
    // Cleanup
    ds.withCollection('agents').remove(ref);
};