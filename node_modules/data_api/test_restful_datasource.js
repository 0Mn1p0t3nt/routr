'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.testGroup = undefined;

var _restful_datasource = require('data_api/restful_datasource');

var _restful_datasource2 = _interopRequireDefault(_restful_datasource);

var _gateways_api = require('data_api/gateways_api');

var _gateways_api2 = _interopRequireDefault(_gateways_api);

var _status = require('core/status');

var _test_utils = require('data_api/test_utils.js');

var _test_utils2 = _interopRequireDefault(_test_utils);

var _config_util = require('core/config_util.js');

var _config_util2 = _interopRequireDefault(_config_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var testGroup = exports.testGroup = { name: "Restful Data Source", enabled: false }; /**
                                                                                      * @author Pedro Sanders
                                                                                      * @since v1
                                                                                      *
                                                                                      * Unit Test for the "Restful Data Source"
                                                                                      */


var config = (0, _config_util2.default)();
// Forces data source to use its own default parameters...
delete config.spec.dataSource.parameters;

var ds = new _restful_datasource2.default(config);
var ObjectId = Packages.org.bson.types.ObjectId;
var gatewaysAPI = new _gateways_api2.default(ds);

testGroup.basic_operations = function () {
    var domain = _test_utils2.default.buildDomain('Local Domain', 'sip.local');
    var agent = _test_utils2.default.buildAgent('John Doe', ['sip.local'], '1001');

    ds.insert(domain);
    var initSize = ds.withCollection('agents').find().result.length;
    var response = ds.insert(agent);
    var ref = response.result;
    var endSize = ds.withCollection('agents').find().result.length;

    assertTrue(ObjectId.isValid(ref));
    assertTrue(endSize == initSize + 1);
    assertTrue(agent.metadata.name.equals("John Doe"));

    agent.metadata.name = "Jae Doe";
    agent.metadata.ref = ref;
    response = ds.update(agent);
    assertTrue(response.status == _status.Status.OK);

    response = ds.withCollection('agents').remove(ref);
    assertTrue(response.status == _status.Status.OK);

    response = ds.withCollection('agents').find();
    endSize = response.result.length;
    assertTrue(initSize == endSize);
};

testGroup.get_collections = function () {
    var response = ds.withCollection('agents').find('*');
    assertTrue(response.status == _status.Status.OK);

    response = ds.withCollection('dids').find('*');
    assertTrue(response.status == _status.Status.OK);

    response = ds.withCollection('agents').find("@.spec.credentials.username=='john'|| @.spec.credentials.username=='janie'");
    assertTrue(response.status == _status.Status.OK);

    response = ds.withCollection('agents').find("@.spec.credentials.username=='john'");
    assertTrue(response.status == _status.Status.OK);

    response = ds.withCollection('agents').find("@.spec.credentials.username=='jhon'");
    assertTrue(response.status == _status.Status.NOT_FOUND);

    response = ds.withCollection('agents').find("@.spec.credentials.username==jhon'");
    assertTrue(response.status == _status.Status.BAD_REQUEST);
};

// This also validates the other resources
testGroup.get_gateways = function () {
    var response = gatewaysAPI.getGateways();
    assertTrue(response.status == _status.Status.OK);
};

// This also validates the other resources
testGroup.update_domain = function () {
    var domain = _test_utils2.default.buildDomain("Local Domain", "sip.walmart");
    var response = ds.insert(domain);
    var ref = response.result;
    assertTrue(response.status == _status.Status.CREATED);

    domain.metadata.name = 'Walmart2 Local';
    domain.metadata.ref = ref;
    response = ds.update(domain);
    assertTrue(response.status == _status.Status.OK);

    response = ds.withCollection('domains').remove(ref);
    assertTrue(response.status == _status.Status.OK);
};

// This also validates the other resources
testGroup.update_did = function () {
    var did = _test_utils2.default.buildDID();
    var response = ds.insert(did);
    var ref = response.result;
    assertTrue(response.status == _status.Status.CREATED);

    did.metadata.geoInfo.city = 'Cameron, GA';
    did.metadata.ref = ref;
    response = ds.update(did);
    assertTrue(response.status == _status.Status.OK);

    response = ds.withCollection('dids').remove(ref);
    assertTrue(response.status == _status.Status.OK);
};

// This also validates the other resources
testGroup.update_peer = function () {
    var peer = _test_utils2.default.buildPeer('Asterisk PBX', 'ast', 'node1');
    var response = ds.insert(peer);
    var ref = response.result;
    assertTrue(response.status == _status.Status.CREATED);

    peer.metadata.name = 'DodoPBX';
    peer.metadata.ref = ref;
    response = ds.update(peer);
    assertTrue(response.status == _status.Status.OK);

    response = ds.withCollection('peers').remove(ref);
    assertTrue(response.status == _status.Status.OK);
};