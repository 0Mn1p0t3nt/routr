'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @author Pedro Sanders
 * @since v1
 */

var TestUtils = function () {
    function TestUtils() {
        _classCallCheck(this, TestUtils);
    }

    _createClass(TestUtils, null, [{
        key: 'buildEndpoint',
        value: function buildEndpoint(kind, name, username) {
            var secret = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '1234';

            var endpoint = {
                apiVersion: 'v1.0',
                metadata: {
                    userId: 'john@doe.com',
                    name: name
                },
                spec: {
                    credentials: {
                        username: username,
                        secret: secret
                    }
                }
            };
            endpoint.kind = kind;
            return endpoint;
        }
    }, {
        key: 'buildAgent',
        value: function buildAgent(name, domains, username) {
            var secret = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '1234';

            var agent = TestUtils.buildEndpoint('Agent', name, username, secret);
            agent.spec.domains = domains;
            return agent;
        }
    }, {
        key: 'buildPeer',
        value: function buildPeer(name, device, username) {
            var secret = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '1234';

            var peer = TestUtils.buildEndpoint('Peer', name, username, secret);
            peer.spec.device = device;
            return peer;
        }
    }, {
        key: 'buildGateway',
        value: function buildGateway(name, username) {
            var ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1234';
            var secret = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '1234';

            var gateway = {
                apiVersion: 'v1.0',
                kind: 'Gateway',
                metadata: {
                    userId: 'john@doe.com',
                    name: name,
                    ref: ref
                },
                spec: {
                    transport: 'tcp',
                    host: 'provider.net',
                    credentials: {
                        username: username,
                        secret: secret
                    }
                }
            };
            return gateway;
        }
    }, {
        key: 'buildDomain',
        value: function buildDomain(name, domainUri) {
            var domain = {
                apiVersion: 'v1.0',
                kind: 'Domain',
                metadata: {
                    userId: 'john@doe.com',
                    name: name
                },
                spec: {
                    context: {
                        domainUri: domainUri,
                        egressPolicy: {
                            rule: '.*',
                            didRef: 'DID0001'
                        }
                    }
                }
            };
            return domain;
        }
    }, {
        key: 'buildDID',
        value: function buildDID() {
            var did = {
                apiVersion: 'v1.0',
                kind: 'DID',
                metadata: {
                    userId: 'john@doe.com',
                    gwRef: '595bc68492bccf1454883d0b',
                    geoInfo: {
                        city: 'Sanford, GA',
                        country: 'United States',
                        countryISOCode: 'DR'
                    }
                },
                spec: {
                    location: {
                        telUrl: 'tel:61198972121',
                        aorLink: 'sip:1001@sip.local'
                    }
                }
            };
            return did;
        }
    }]);

    return TestUtils;
}();

exports.default = TestUtils;