'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.testGroup = undefined;

var _files_datasource = require('data_api/files_datasource');

var _files_datasource2 = _interopRequireDefault(_files_datasource);

var _locator = require('location/locator.js');

var _locator2 = _interopRequireDefault(_locator);

var _utils = require('location/utils.js');

var _utils2 = _interopRequireDefault(_utils);

var _dids_api = require('data_api/dids_api');

var _dids_api2 = _interopRequireDefault(_dids_api);

var _domains_api = require('data_api/domains_api');

var _domains_api2 = _interopRequireDefault(_domains_api);

var _gateways_api = require('data_api/gateways_api');

var _gateways_api2 = _interopRequireDefault(_gateways_api);

var _status = require('core/status');

var _config_util = require('core/config_util.js');

var _config_util2 = _interopRequireDefault(_config_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @author Pedro Sanders
 * @since v1
 *
 * Unit Test for the "Location Service Module"
 */
var config = (0, _config_util2.default)();
// Forces data source to use its own default parameters...
delete config.spec.dataSource.parameters;

var ds = new _files_datasource2.default(config);
var dataAPIs = {
    DomainsAPI: new _domains_api2.default(ds),
    GatewaysAPI: new _gateways_api2.default(ds),
    DIDsAPI: new _dids_api2.default(ds)
};

var SipFactory = Packages.javax.sip.SipFactory;
var addressFactory = SipFactory.getInstance().createAddressFactory();
var locator = new _locator2.default(dataAPIs);

var testGroup = exports.testGroup = { name: "Location Service Module"

    // Tests
};testGroup.aor_as_string = function () {
    var sipURI = addressFactory.createSipURI('john', 'sip.ocean.com');
    var aorString = _utils2.default.aorAsString(sipURI);
    assertEquals(aorString, 'sip:john@sip.ocean.com');
    // Testing TelURL
    var telURL = addressFactory.createTelURL('tel:8095863314');
    aorString = _utils2.default.aorAsString(telURL);
    assertEquals(aorString, 'tel:8095863314');
    // Test text format
    aorString = _utils2.default.aorAsString('sip:john@sip.ocean.com');
    assertEquals(aorString, 'sip:john@sip.ocean.com');
};

testGroup.find_local_endpoint = function () {
    // Add  endpoints
    var agentEndpoint = buildEndpoint('1001', 'sip.local', '192.168.1.2:5061');
    var peerEndpoint = buildEndpoint('ast', '192.168.1.2:5061', '192.168.1.2:5061');
    locator.addEndpoint(agentEndpoint.aor, agentEndpoint.route);
    locator.addEndpoint(peerEndpoint.aor, peerEndpoint.route);
    testFE(agentEndpoint.aor);
    testFE(peerEndpoint.aor);
    locator.removeEndpoint(agentEndpoint.aor);
};

testGroup.find_endpoint_for_did = function () {
    // This is the local aor for the did '0000000000'
    var endpoint = buildEndpoint('1001', 'sip.local', '192.168.1.2:5061');
    locator.addEndpoint(endpoint.aor, endpoint.route);
    testFE(addressFactory.createSipURI('0000000000', 'sip.local'));
    locator.removeEndpoint(endpoint.aor);
};

testGroup.find_remote_endpoint = function () {
    testFE(addressFactory.createSipURI('17853178070', 'sip.local'), true);
};

// Test having more than one route per address of record
testGroup.add_multi_aor = function () {
    var ep1 = buildEndpoint('1001', 'sip.local', '192.168.1.2:5061');
    var ep2 = buildEndpoint('1001', 'sip.local', '192.168.1.3:5061');
    locator.addEndpoint(ep1.aor, ep1.route);
    locator.addEndpoint(ep2.aor, ep2.route);
    testFE(ep1.aor);
};

function buildEndpoint(username, domain, host) {
    var aor = addressFactory.createSipURI(username, domain);
    var contactURI = addressFactory.createSipURI(username, host);
    return {
        aor: aor,
        route: {
            isLinkAOR: false,
            thruGw: false,
            sentByAddress: 'localhost',
            sentByPort: 5060,
            received: 'remotehost',
            rport: 5061,
            contactURI: contactURI,
            registeredOn: Date.now(),
            nat: false
        }
    };
}

function testFE(aor) {
    var thruGw = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    var response = locator.findEndpoint(aor);
    assertEquals(_status.Status.OK, response.status);
    response.result.forEach(function (route) {
        return assertEquals(thruGw, route.thruGw);
    });
}