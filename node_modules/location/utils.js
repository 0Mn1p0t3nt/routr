'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @author Pedro Sanders
 * @since v1
 */
var LocatorUtils = function () {
    function LocatorUtils() {
        _classCallCheck(this, LocatorUtils);
    }

    _createClass(LocatorUtils, null, [{
        key: 'aorAsString',
        value: function aorAsString(addressOfRecord) {
            if (addressOfRecord instanceof Packages.javax.sip.address.TelURL) {
                return 'tel:' + addressOfRecord.getPhoneNumber();
            } else if (addressOfRecord instanceof Packages.javax.sip.address.SipURI) {
                if (addressOfRecord.isSecure()) {
                    return 'sips:' + addressOfRecord.getUser() + '@' + addressOfRecord.getHost();
                } else {
                    return 'sip:' + addressOfRecord.getUser() + '@' + addressOfRecord.getHost();
                }
            } else {
                if (/sips?:.*@.*/.test(addressOfRecord) || /tel:\d+/.test(addressOfRecord)) {
                    return addressOfRecord;
                }
                LOG.error('Invalid AOR: ' + addressOfRecord);
            }

            throw 'Invalid AOR: ' + addressOfRecord;
        }
    }, {
        key: 'buildForwardRoute',
        value: function buildForwardRoute(contactURI) {
            return [{
                isLinkAOR: false,
                thruGw: false,
                contactURI: contactURI
            }];
        }
    }, {
        key: 'buildEgressRoute',
        value: function buildEgressRoute(contactURI, gateway, did, domain) {
            var route = {
                isLinkAOR: false,
                thruGw: true,
                gwUsername: gateway.spec.credentials.username,
                gwRef: gateway.metadata.ref,
                gwHost: gateway.spec.host,
                didRef: did.metadata.ref,
                did: did.spec.location.telUrl.split(':')[1],
                contactURI: contactURI
            };
            if (domain) {
                route.rule = domain.spec.context.egressPolicy.rule;
            }
            return route;
        }
    }]);

    return LocatorUtils;
}();

exports.default = LocatorUtils;