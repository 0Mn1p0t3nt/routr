'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
author Pedro Sanders
since v1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */


var _utils = require('core/utils');

var _utils2 = _interopRequireDefault(_utils);

var _config_util = require('core/config_util');

var _config_util2 = _interopRequireDefault(_config_util);

var _status = require('core/status');

var _jwt_token_generator = require('rest/jwt_token_generator');

var _jwt_token_generator2 = _interopRequireDefault(_jwt_token_generator);

var _agents_service = require('rest/agents_service.js');

var _agents_service2 = _interopRequireDefault(_agents_service);

var _peers_service = require('rest/peers_service.js');

var _peers_service2 = _interopRequireDefault(_peers_service);

var _domains_service = require('rest/domains_service.js');

var _domains_service2 = _interopRequireDefault(_domains_service);

var _gateways_service = require('rest/gateways_service.js');

var _gateways_service2 = _interopRequireDefault(_gateways_service);

var _dids_service = require('rest/dids_service.js');

var _dids_service2 = _interopRequireDefault(_dids_service);

var _parameter_auth_filter = require('rest/parameter_auth_filter');

var _parameter_auth_filter2 = _interopRequireDefault(_parameter_auth_filter);

var _basic_auth_filter = require('rest/basic_auth_filter');

var _basic_auth_filter2 = _interopRequireDefault(_basic_auth_filter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Spark = Packages.spark.Spark;
var options = Packages.spark.Spark.options;
var get = Packages.spark.Spark.get;
var post = Packages.spark.Spark.post;
var before = Packages.spark.Spark.before;
var path = Packages.spark.Spark.path;
var LogManager = Packages.org.apache.logging.log4j.LogManager;
var LOG = LogManager.getLogger();

var Rest = function () {
    function Rest(server, locator, registry, dataAPIs) {
        _classCallCheck(this, Rest);

        var config = (0, _config_util2.default)();
        this.rest = config.spec.restService;
        this.system = config.system;
        this.dataAPIs = dataAPIs;
        this.locator = locator;
        this.registry = registry;
        this.server = server;
        this.config = config;

        LOG.info('Starting Restful service (port: ' + this.rest.port + ', apiPath: ' + this.system.apiPath + ')');

        Spark.ipAddress(this.rest.bindAddr);

        if (!this.rest.unsecured) {
            Spark.secure(config.spec.restService.keyStore, config.spec.restService.keyStorePassword, config.spec.restService.trustStore, config.spec.restService.trustStorePassword);
        }

        Spark.port(this.rest.port);
        Spark.internalServerError(function (req, res) {
            res.type('application/json');
            return '{\"status\": \"500\", \"message\":\"Internal server error\"}';
        });
        Spark.notFound(function (req, res) {
            res.type('application/json');
            return '{\"status\": \"404\", \"message\":\"Not found\"}';
        });
    }

    _createClass(Rest, [{
        key: 'start',
        value: function start() {
            var _this = this;

            options('/*', function (req, res) {
                var accessControlRequestHeaders = req.headers('Access-Control-Request-Headers');
                if (accessControlRequestHeaders != null) {
                    res.header('Access-Control-Allow-Headers', accessControlRequestHeaders);
                }

                var accessControlRequestMethod = req.headers('Access-Control-Request-Method');
                if (accessControlRequestMethod != null) {
                    res.header('Access-Control-Allow-Methods', accessControlRequestMethod);
                }
                return 'OK';
            });

            path(this.system.apiPath, function (r) {
                before('/*', function (req, res) {
                    res.header('Access-Control-Allow-Origin', '*');
                    if (req.pathInfo().endsWith('/credentials')) {
                        (0, _basic_auth_filter2.default)(req, res, _this.dataAPIs.UsersAPI);
                    } else {
                        (0, _parameter_auth_filter2.default)(req, res, _this.config.salt);
                    }
                });

                // Its always running! Use to ping Sip IO server
                get('/system/status', function (req, res) {
                    return '{\"status\": \"Up\"}';
                });

                post('/system/status/:status', function (req, res) {
                    // halt or error
                    var status = req.params(':status');
                    if (status.equals('down')) {
                        _this.server.stop();
                    } else {
                        res.status(401);
                        res.body('{\"status\": \"400\", \"message\":\"Bad Request\"}');
                    }
                });

                get('/system/info', function (req, res) {
                    return JSON.stringify(_this.system);
                });

                get('/credentials', function (req, res) {
                    return (0, _jwt_token_generator2.default)(req, res, _this.config.salt);
                });

                get('/location', function (req, res) {
                    return JSON.stringify(_utils2.default.buildResponse(_status.Status.OK, _this.locator.listAsJSON()));
                });

                get('/registry', function (req, res) {
                    return JSON.stringify(_utils2.default.buildResponse(_status.Status.OK, _this.registry.listAsJSON()));
                });

                (0, _agents_service2.default)(_this.dataAPIs.AgentsAPI);
                (0, _peers_service2.default)(_this.dataAPIs.PeersAPI);
                (0, _domains_service2.default)(_this.dataAPIs.DomainsAPI);
                (0, _gateways_service2.default)(_this.dataAPIs.GatewaysAPI);
                (0, _dids_service2.default)(_this.dataAPIs.DIDsAPI);
            });
        }
    }, {
        key: 'stop',
        value: function stop() {
            LOG.info('Stopping Restful service');
            Spark.stop();
        }
    }]);

    return Rest;
}();

exports.default = Rest;