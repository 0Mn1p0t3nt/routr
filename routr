#!/usr/bin/env sh

set -e

BASE_DIR="$(cd "$(dirname "$0")"; pwd)"
RESTART_CODE=123

[ -d "$BASE_DIR/jre" ] && JAVA_HOME=$BASE_DIR/jre
[ -z "$ROUTR_LOG4J2" ] && ROUTR_LOG4J2=config/log4j2.yml

run() {
    cd $BASE_DIR
    $JAVA_HOME/bin/java \
    -DROUTR_DATA=$ROUTR_DATA \
    -Dlog4j.configurationFile=$ROUTR_LOG4J2 \
    -Dgraal.TruffleFunctionInlining=false \
    -Dgraal.CompilationFailureAction=Silent \
    -Dpolyglot.js.experimental-foreign-object-prototype=true \
    -Dpolyglot.js.nashorn-compat=true \
    -Dnashorn.args="--no-deprecation-warning" \
    $ROUTR_JAVA_OPTS \
    -classpath "$BASE_DIR/libs/*" \
    io.routr.core.Launcher
    return $?
}

if [ -f /.dockerenv ]; then
    [ -z "$ROUTR_EXTERN_ADDR" ] && { echo "Must define environment variable ROUTR_EXTERN_ADDR when running inside a container"; exit 1; }
    [ -z "$ROUTR_LOCALNETS" ] && export ROUTR_LOCALNETS=$(ip addr show eth0 | grep "inet\b" | awk '{print $2}')
fi

[ -z "$JAVA_HOME" ] && { echo "Could not find a runtime environment. Please setup the JAVA_HOME environment variable"; exit 1; }

{
    until false; do
      run
      exit_code=$?
      if [ $exit_code -ne $RESTART_CODE ] ; then
          break
      fi
    done
} || { # your 'catch' block
    echo 'Done.'
}
